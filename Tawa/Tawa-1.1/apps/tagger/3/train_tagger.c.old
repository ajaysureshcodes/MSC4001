/* Loads or creates a tag-based model using cumulative probability
   tables (pt), adds some text to the model, then writes out the
   changed model. */
#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include <unistd.h>

#ifdef SYSTEM_LINUX
#include <getopt.h> /* for getopt on Linux systems */
#endif

#include "io.h"
#include "word.h"
#include "text.h"
#include "table.h"
#include "model.h"
#include "pt_model.h"

#define MAX_FILENAME_SIZE 128      /* Maximum size of a filename */

#define DEFAULT_TAGS_MAX_ORDER 2   /* Default max order for tag model */
#define DEFAULT_TAGS_ESCAPE_METHOD TLM_PPM_Method_D  /* Default escape method for tags model */
#define DEFAULT_CHARS_MAX_ORDER 4  /* Default max order for character model */
#define DEFAULT_CHARS_ESCAPE_METHOD TLM_PPM_Method_D /* Default escape method for chars model */
#define CHARS_ALPHABET_SIZE 256    /* Size of the character model's alphabet */

#define PERFORMS_EXCLS TRUE

char *Model_title;

unsigned int Tags_model;
unsigned int Tags_model_max_order = DEFAULT_TAGS_MAX_ORDER;
unsigned int Tags_alphabet_size = 0;

unsigned int Words_model;

unsigned int Chars_model;
unsigned int Chars_model_max_order = DEFAULT_CHARS_MAX_ORDER;

boolean Input_found = FALSE, Output_found = FALSE, Title_found = FALSE;

char *Title = NULL;
char Input_filename [MAX_FILENAME_SIZE];
char Output_filename [MAX_FILENAME_SIZE];

unsigned int Input_text_file;
unsigned int Input_tagslist_file;

unsigned int Output_tags_model_file;
unsigned int Output_tagslist_table_file;
unsigned int Output_words_model_file;
unsigned int Output_chars_model_file;

void
open_input_files (char *file_prefix)
/* Opens all the input files for reading. */
{
  char filename [MAX_FILENAME_SIZE];

  sprintf (filename, "%s.text", file_prefix);
  Input_text_file = TXT_open_file (filename, "r",
      "Reading from text file",
      "Train: can't open text file" );

  sprintf (filename, "%s.tagslist", file_prefix);
  Input_tagslist_file = TXT_open_file (filename, "r",
      "Reading from tagslist file",
      "Train: can't open text file" );

  fprintf (stderr, "\n");
}

void
open_output_files (char *file_prefix)
/* Opens all the output files for writing. */
{
  char filename [MAX_FILENAME_SIZE];

  sprintf (filename, "%s_tags.model", file_prefix);
  Output_tags_model_file = TXT_open_file (filename, "w",
      "Writing tags model into file",
      "Train: can't open tags model file" );

  sprintf (filename, "%s_tagslist.table", file_prefix);
  Output_tagslist_table_file = TXT_open_file (filename, "w",
      "Writing tagslist table into file",
      "Train: can't open tagslist table file" );

  sprintf (filename, "%s_words.model", file_prefix);
  Output_words_model_file = TXT_open_file (filename, "w",
      "Writing word model into file",
      "Train: can't open words model file" );

  sprintf (filename, "%s_chars.model", file_prefix);
  Output_chars_model_file = TXT_open_file (filename, "w",
      "Writing chars model into file",
      "Train: can't open chars model file" );

  fprintf (stderr, "\n");
}

void
usage (void)
{
    fprintf (stderr,
	     "Usage: train [options] -i tagged-input-text -o model-files\n"
	     "(Tagged input text consists of two lines of text - one line\n"
             " for each term (word) and the second line the term's tag)\n"
	     "\n");
    fprintf (stderr,
	     "options:\n"
             "  -d n\tdebugging level=n\n"
	     "  -i fn\tinput filename=fn (required argument)\n"
	     "  -o fn\tgeneric output filename=fn (required argument)\n"
	     "  -p n\tprogress report every n words\n"
	     "  -T n\tlong description (title) of model (required argument)\n"
	     "  -1 n\tmax order of tag model=n (optional; default=2)\n"
	     "  -2 n\tmax order of character model=n (optional; default=4)\n"
	);
    exit (2);
}

void
init_arguments (int argc, char *argv[])
{
    extern char *optarg;
    extern int optind;
    int opt;

    /* get the argument options */

    Output_found = FALSE;
    Title_found = FALSE;
    Debug.level = 0;
    while ((opt = getopt (argc, argv, "T:d:i:o:p:1:2:")) != -1)
	switch (opt)
	{
	case 'd':
	    Debug.level = atoi (optarg);
	    break;
	case 'i':
	    Input_found = TRUE;
	    sprintf (Input_filename, "%s", optarg);
	    break;
	case 'o':
	    Output_found = TRUE;
	    sprintf (Output_filename, "%s", optarg);
	    break;
	case 'p':
	    Debug.progress = atoi (optarg);
	    break;
	case 'T':
	    Title_found = TRUE;
	    Model_title = (char *) malloc (strlen (optarg)+1);
	    strcpy (Model_title, optarg);
	    break;
	case '1':
	    Tags_model_max_order = atoi (optarg);
	    break;
	case '2':
	    Chars_model_max_order = atoi (optarg);
	    break;
	default:
	    usage ();
	    break;
	}

    fprintf (stderr, "\nCreating new models\n\n");

    if (!Output_found)
        fprintf (stderr, "\nFatal error: missing output filename\n\n");
    if (!Title_found)
        fprintf (stderr, "\nFatal error: missing title of the model\n\n");
    if (!Output_found || !Title_found)
      {
	usage ();
	exit (1);
      }
    for (; optind < argc; optind++)
	usage ();
}

void
process_word (unsigned int tagslist_table, unsigned int tags_model, unsigned int tags_context,
	      unsigned int words_model, unsigned int words_context,
	      unsigned int chars_model, unsigned int chars_context,
	      unsigned int prev_word, unsigned int tag, unsigned int word)
/* Trains the model from the word. */
{
    unsigned int tag_id, tag_count, pos, symbol;

    /* Update the tag context */
    assert (TXT_getid_table (tagslist_table, tag, &tag_id, &tag_count));
    TLM_update_context (tags_model, tags_context, tag_id);

    /* Update the order 0 word context */
    TLM_update_context (words_model, NIL, word);
    if (PT_Novel_Symbols)
      {
	if (Debug.level > 2)
	  {
	    fprintf (stderr, "Novel word: ");
	    TXT_dump_text (Stderr_File, word, TXT_dump_symbol);
	    fprintf (stderr, "\n");
	  }
	pos = 0;
	while (TXT_get_symbol (word, pos, &symbol))
	  {
	    TLM_update_context (chars_model, chars_context, symbol);
	    pos++;
	  }
	TLM_update_context (chars_model, chars_context, 0); /* Terminate with null */
      }

    /* Create the higher order word contexts, and update the words model with them */
    TXT_setlength_text (words_context, 0);

    /* Update the p(Wn | Tn) context */
    TXT_append_symbol (words_context, tag_id);
    TLM_update_context (words_model, words_context, word);

    /* Update the p(Wn | Tn Wn-1) context; we can use the same context variable & model */
    if (prev_word != NIL)
      { 
	TXT_append_text (words_context, prev_word);
	TXT_append_symbol (words_context, TXT_sentinel_symbol ());
	/* The sentinel symbol is used here to separate out the words in
	   the context since some "words" may in fact have spaces in them */
	TLM_update_context (words_model, words_context, word);
      }
}

void
process_file (unsigned int text_file,
	      unsigned int tagslist_table,
	      unsigned int tags_model,
	      unsigned int words_model,
	      unsigned int chars_model)
/* Trains the model from the words and characters in the text. */
{
    unsigned int tags_context, words_context, chars_context;
    unsigned int word, word_pos, tag;
    unsigned int prev_word;
    boolean eof;

    TLM_set_context_operation (TLM_Get_Nothing);

    prev_word = NIL;
    word = TXT_create_text ();
    tag = TXT_create_text ();
    tags_context = TLM_create_context (tags_model);
    words_context = TXT_create_text ();
    chars_context = TLM_create_context (chars_model);

    word_pos = 0;
    eof = FALSE;
    for (;;)
    {
        word_pos++;
	if ((Debug.progress > 0) && ((word_pos % Debug.progress) == 0))
	  {
	    fprintf (stderr, "Processing word pos %d\n", word_pos);
	    /*dump_memory (Stderr_File);*/
	  }
        /* repeat until EOF or max input */
	eof = (TXT_readline_text (text_file, tag) == EOF);

	if (eof)
	    break;

	eof = (TXT_readline_text (text_file, word) == EOF);
	assert (!eof);

	if (Debug.range)
	  {
	    fprintf (stderr, "Pos %d Processed word {", word_pos);
	    TXT_dump_text (Stderr_File, word, TXT_dump_symbol);
	    fprintf (stderr, "} tag {");
	    TXT_dump_text (Stderr_File, tag, TXT_dump_symbol);
	    fprintf (stderr, "}\n");
	  }

	process_word (tagslist_table, tags_model, tags_context,
		      words_model, words_context, chars_model, chars_context,
		      prev_word, tag, word);

	prev_word = word;
    }

    TLM_release_context (words_model, words_context);
    TLM_release_context (chars_model, chars_context);

    TXT_release_text (tag);
    TXT_release_text (word);

    if (Debug.range || (Debug.progress != 0))
        fprintf (stderr, "Processed %d words\n", word_pos);
}

int
main (int argc, char *argv[])
{
    unsigned int tagslist_table, tagslist_type;
    unsigned int tagslist_types_count, tagslist_tokens_count;
    unsigned int model_form;

    init_arguments (argc, argv);

    open_input_files (Input_filename);
    open_output_files (Output_filename);

    model_form = TLM_Static; /* TLM_Dynamic not yet implemented */

    tagslist_table = TXT_load_table_keys (Input_tagslist_file);
    TXT_getinfo_table (tagslist_table, &tagslist_type, &tagslist_types_count,
		       &tagslist_tokens_count);
    TXT_write_table (Output_tagslist_table_file, tagslist_table, TLM_Static);

    Tags_model = TLM_create_model
          (TLM_PPM_Model, Model_title, tagslist_types_count,
	   Tags_model_max_order, DEFAULT_TAGS_ESCAPE_METHOD, PERFORMS_EXCLS);
    Words_model = TLM_create_model (TLM_PT_Model, Model_title);
    Chars_model = TLM_create_model
          (TLM_PPM_Model, Model_title, CHARS_ALPHABET_SIZE,
	   Chars_model_max_order, DEFAULT_CHARS_ESCAPE_METHOD, PERFORMS_EXCLS);

    process_file (Input_text_file, tagslist_table, Tags_model, Words_model, Chars_model);

    TLM_write_model (Output_tags_model_file, Tags_model, model_form);
    TLM_write_model (Output_words_model_file, Words_model, model_form);
    TLM_write_model (Output_chars_model_file, Chars_model, model_form);

    if (Debug.level > 4)
      {
	fprintf (stderr, "\nDump of word model:\n" );
        TLM_dump_model (Stderr_File, Words_model, NULL);

	fprintf (stderr, "\nDump of character model:\n" );
        TLM_dump_model (Stderr_File, Chars_model, NULL);
      }

    TLM_release_model (Tags_model);
    TLM_release_model (Words_model);
    TLM_release_model (Chars_model);

    TXT_release_table (tagslist_table);

    exit (0);
}
